#!/bin/bash

echo "🚀 Medical Management System - Deployment Update"
echo "================================================="

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if we're in the right directory
if [ ! -f "manage.py" ]; then
    echo -e "${RED}❌ Error: Not in Django project directory${NC}"
    echo "Please run this script from the medical_management directory"
    exit 1
fi

echo -e "${BLUE}📋 Current Project Status:${NC}"
echo "Directory: $(pwd)"
echo "Git status:"
git status --short

echo -e "\n${YELLOW}🔍 Pre-deployment Checks:${NC}"

# Check if virtual environment exists
if [ -d "venv" ]; then
    echo "✅ Virtual environment found"
    source venv/bin/activate
    echo "✅ Virtual environment activated"
else
    echo -e "${RED}❌ Virtual environment not found${NC}"
    exit 1
fi

# Run tests
echo -e "\n${YELLOW}🧪 Running deployment tests...${NC}"
python test_deployment.py
if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Deployment tests failed${NC}"
    echo "Please fix the issues before deploying"
    exit 1
fi

# Check for uncommitted changes
if [ -n "$(git status --porcelain)" ]; then
    echo -e "\n${YELLOW}📝 Uncommitted changes detected:${NC}"
    git status --short
    
    read -p "Do you want to commit these changes? (y/N): " commit_choice
    if [[ $commit_choice =~ ^[Yy]$ ]]; then
        # Get commit message
        echo "Enter commit message (or press Enter for default):"
        read -r commit_message
        if [ -z "$commit_message" ]; then
            commit_message="Update deployment - $(date '+%Y-%m-%d %H:%M:%S')"
        fi
        
        echo -e "${BLUE}📦 Committing changes...${NC}"
        git add .
        git commit -m "$commit_message"
        echo "✅ Changes committed"
    else
        echo -e "${YELLOW}⚠️  Continuing without committing changes${NC}"
    fi
fi

# Run Django system checks
echo -e "\n${YELLOW}🔍 Running Django system checks...${NC}"
python manage.py check --deploy
if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Django system checks failed${NC}"
    echo "Please fix the issues before deploying"
    exit 1
fi

# Collect static files
echo -e "\n${YELLOW}📁 Collecting static files...${NC}"
python manage.py collectstatic --noinput
echo "✅ Static files collected"

# Run migrations (locally to test)
echo -e "\n${YELLOW}🗄️  Testing database migrations...${NC}"
python manage.py makemigrations --dry-run
python manage.py migrate --plan
echo "✅ Migration check complete"

# Push to repository
echo -e "\n${YELLOW}🔄 Pushing to remote repository...${NC}"
git push origin main
if [ $? -eq 0 ]; then
    echo "✅ Successfully pushed to repository"
else
    echo -e "${RED}❌ Failed to push to repository${NC}"
    exit 1
fi

echo -e "\n${GREEN}🎉 Local deployment preparation complete!${NC}"
echo -e "\n${BLUE}🌐 Next Steps for Render Deployment:${NC}"
echo "================================================="
echo "1. Go to your Render dashboard: https://dashboard.render.com"
echo "2. Find your 'medical-management-system' service"
echo "3. Click on the service to open it"
echo "4. Go to the 'Deployments' tab"
echo "5. Click 'Deploy Latest Commit' button"
echo ""
echo -e "${YELLOW}📋 Environment Variables to Check (if needed):${NC}"
echo "- ALLOWED_HOSTS: medical-management-system-v8d5.onrender.com,localhost,127.0.0.1"
echo "- EMAIL_HOST_PASSWORD: kgbknhjbemonukgm"
echo "- SECRET_KEY: (auto-generated by Render)"
echo "- DEBUG: False"
echo ""
echo -e "${GREEN}🔗 Your URLs:${NC}"
echo "- Production: https://medical-management-system-v8d5.onrender.com"
echo "- Admin Panel: https://medical-management-system-v8d5.onrender.com/admin/"
echo ""
echo -e "${BLUE}💡 Monitoring Your Deployment:${NC}"
echo "- Watch the deployment logs in Render dashboard"
echo "- Deployment usually takes 3-5 minutes"
echo "- Check the site after deployment completes"
echo ""
echo -e "${GREEN}✨ Deployment update initiated successfully!${NC}"
